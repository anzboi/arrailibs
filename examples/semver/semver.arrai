let grammar = {://grammar.lang.wbnf[grammar]:
semver       -> "v"? core ("-" prerelease)? ("+" build)?;

core         -> maj=(\d+) "." min=(\d+) "." patch=(\d+);

prerelease   -> preid:".";
preid        -> ALPHAIDENT|NUMERICIDENT;

build        -> buildid:".";
buildid      -> ALPHAIDENT|DIGITS;

ALPHAIDENT   -> [[:alnum:]]+ [[:alpha:]] [[:alnum:]]+ | [[:alnum:]]+ [[:alpha:]] | [[:alpha:]] [[:alnum:]]+ | [[:alpha:]];
NUMERICIDENT -> "0" | [1-9]\d+;
DIGITS       -> \d+;
:};

let rec union_array = \arr
    cond arr {
        [elem, ...rem]: elem | union_array(rem),
        [elem]: elem,
    };

let stich_prerelease = \node
    let identity = \t t;
    let dots = cond node {
        ('': [...elems], ...): union_array(elems),
    };
    let elems = union_array(node.preid >> union_array(.ALPHAIDENT.''));
    (dots | elems) rank (:.@);

let stich_build = \node
    let identity = \t t;
    let dots = cond node {
        ('': [...elems], ...): union_array(elems),
    };
    let elems = union_array(node.buildid >> union_array(.ALPHAIDENT.''));
    (dots | elems) rank (:.@);

let parse = \bytes //grammar.parse(grammar, "semver", bytes) ->
    (
        string: bytes, # TODO: if bytes is actually a byte array, convert to string
        maj: .core.maj.'' rank (@:.@) -> //eval.value(.),
        min: .core.min.'' rank (@:.@) -> //eval.value(.),
        patch: .core.patch.'' rank (@:.@) -> //eval.value(.),
        prerelease: cond . {
            (prerelease: node, ...): stich_prerelease(node),
        },
        build: cond . {
            (build: node, ...): stitch_build(node),
        },
    )
;

(
    :grammar,
    :parse,
)
