let grammar = {://grammar.lang.wbnf[grammar]:
semver       -> "v"? core ("-" prerelease)? ("+" build)?;

core         -> maj=(\d+) "." min=(\d+) "." patch=(\d+);

prerelease   -> preid:".";
preid        -> ALPHAIDENT|NUMERICIDENT;

build        -> buildid:".";
buildid      -> ALPHAIDENT|DIGITS;

ALPHAIDENT   -> [[:alnum:]]+ [[:alpha:]] [[:alnum:]]+ | [[:alnum:]]+ [[:alpha:]] | [[:alpha:]] [[:alnum:]]+ | [[:alpha:]];
NUMERICIDENT -> "0" | [1-9]\d+;
DIGITS       -> \d+;
:};

let rec union_array = \arr
    cond arr {
        [elem, ...rem]: elem | union_array(rem),
        [elem]: elem,
    }
;

let stitch_prerelease = \node
    let identity = \t t;
    let dots = cond node {
        ('': [...elems], ...): union_array(elems),
    };
    let elems = union_array(node.preid >> cond . {
        # match on either alpha or numeric ident
        (ALPHAIDENT: ('': arr, ...), ...): union_array(arr),
        (NUMERICIDENT: ('': num, ...), ...): num,
    });
    (dots | elems) rank (:.@)
;

let stitch_build = \node
    let identity = \t t;
    let dots = cond node {
        ('': [...elems], ...): union_array(elems),
    };
    let elems = union_array(node.buildid >> cond . {
        (ALPHAIDENT: ('': arr, ...), ...): union_array(arr),
        (DIGITS: ('': digits, ...), ...): digits,
    });
    (dots | elems) rank (:.@);

let eval = \parsed (
    major: parsed.core.maj.'' rank (@:.@) -> //eval.value(.),
    minor: parsed.core.min.'' rank (@:.@) -> //eval.value(.),
    patch: parsed.core.patch.'' rank (@:.@) -> //eval.value(.),
    prerelease: cond parsed {
        (prerelease: node, ...): stitch_prerelease(node),
    },
    build: cond parsed {
        (build: node, ...): stitch_build(node),
    },
);


let parse = \bytes eval(//grammar.parse(grammar, "semver", bytes)) ->
    (
        :.major,
        :.minor,
        :.patch,
        :.prerelease,
        :.build,
    )
;

let string = \obj
    let pre = cond obj.prerelease {
        {}: "",
        _: "-" + obj.prerelease,
    };
    let build = cond obj.build {
        {}: "",
        _: "+" + obj.build,
    };
$`${obj.major}.${obj.minor}.${obj.patch}${pre}${build}`;

(
    :grammar,
    :parse,
    :string,
)
